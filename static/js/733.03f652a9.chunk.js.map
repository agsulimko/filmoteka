{"version":3,"file":"static/js/733.03f652a9.chunk.js","mappings":"sQACA,EAA6B,4BAA7B,EAAqE,2B,SCmDrE,EAhDgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QAIAE,GAAqBC,EAAAA,EAAAA,MAArBD,iBACRE,GAAoCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAzCI,EAAaF,EAAA,GAAEG,EAAUH,EAAA,GAE1BI,EAAY,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,EAAOZ,GAAgB,IAAAa,EAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAEdC,EAAAA,EAAAA,IAAWpB,EAASE,GAAkB,KAAD,EAAAa,EAAAE,EAAAI,KAAvDL,EAAOD,EAAPC,QAERP,GAAW,SAACa,GAAW,OAAAC,EAAAA,EAAAA,GAASP,EAAO,IAAGC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,SAE1CQ,QAAQC,IAAIT,EAAAO,GAAIG,SAAS,yBAAAV,EAAAW,OAAA,GAAAd,EAAA,kBAE5B,gBARiBe,GAAA,OAAAlB,EAAAmB,MAAA,KAAAC,UAAA,KAkBlB,OARAC,EAAAA,EAAAA,YAAU,WAERtB,EAAaR,EAIf,GAAG,CAACA,IAEAM,EAAcyB,QAEdC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAcC,SAC3B7B,EAAc8B,KAAI,SAACC,EAAcC,GAChC,OACEC,EAAAA,EAAAA,MAAA,OAAAJ,SAAA,EACEH,EAAAA,EAAAA,KAAA,KAAAG,SAAA,WAAAK,OAAeH,EAAaI,OAAM,QAClCT,EAAAA,EAAAA,KAAA,KAAAG,SAAIE,EAAaK,YAFTJ,EAKd,OAKFN,EAAAA,EAAAA,KAAA,OAAAG,UACEH,EAAAA,EAAAA,KAAA,KAAGC,UAAWC,EAAeC,SAAC,+CAKtC,C","sources":["webpack://react-homework-template/./src/components/Reviews.module.css?0159","components/Reviews.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"ReviewsNot\":\"Reviews_ReviewsNot__-quJB\",\"container\":\"Reviews_container__gfHkj\"};","import React, { useState, useEffect } from \"react\";\nimport { getReviews } from \"../api/api\";\nimport { useParams, useOutletContext } from \"react-router-dom\";\nimport css from \"./Reviews.module.css\";\nconst Reviews = () => {\n  const { movieId } = useParams();\n  // const [selectedLanguage] = useState(\n  //   localStorage.getItem(\"selectedLanguage\") || \"en-US\"\n  // );\n  const { selectedLanguage } = useOutletContext();\n  const [reviewsMovies, setReviews] = useState([]);\n\n  const fetchReviews = async (selectedLanguage) => {\n    try {\n      const { results } = await getReviews(movieId, selectedLanguage);\n\n      setReviews((prevReviews) => [...results]);\n    } catch (err) {\n      console.log(err.message);\n    }\n  };\n\n  useEffect(() => {\n    // localStorage.setItem(\"selectedLanguage\", selectedLanguage);\n    fetchReviews(selectedLanguage);\n    // Функция для обработки события изменения в локальном хранилище\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedLanguage]);\n\n  if (reviewsMovies.length) {\n    return (\n      <div className={css.container}>\n        {reviewsMovies.map((reviewsMovie, index) => {\n          return (\n            <div key={index}>\n              <p>{`Author: ${reviewsMovie.author}.`}</p>\n              <p>{reviewsMovie.content}</p>\n            </div>\n          );\n        })}\n      </div>\n    );\n  } else\n    return (\n      <div>\n        <p className={css.ReviewsNot}>\n          We don't have any reviews for this movie.\n        </p>\n      </div>\n    );\n};\nexport default Reviews;\n"],"names":["movieId","useParams","selectedLanguage","useOutletContext","_useState","useState","_useState2","_slicedToArray","reviewsMovies","setReviews","fetchReviews","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$getReviews","results","_context","prev","next","getReviews","sent","prevReviews","_toConsumableArray","t0","console","log","message","stop","_x","apply","arguments","useEffect","length","_jsx","className","css","children","map","reviewsMovie","index","_jsxs","concat","author","content"],"sourceRoot":""}