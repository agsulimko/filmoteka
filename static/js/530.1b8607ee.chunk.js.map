{"version":3,"file":"static/js/530.1b8607ee.chunk.js","mappings":"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","sources":["pages/Home.styled.js","webpack://react-homework-template/./src/pages/Movies.module.css?d157","pages/Movies.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nconst Select = styled.select`\n  /* background-color: ${({ isDarkTheme }) =>\n    isDarkTheme ? 'green' : 'red'};*/\n  z-index: 100000;\n`;\n\nconst BackToTopButton = styled.button`\n  position: fixed;\n  bottom: 40px;\n  right: 40px;\n  display: ${({ $visible }) => ($visible ? 'block' : 'none')};\n  /* display: ${props => (props.visible ? 'block' : 'none')}; */\n  background-color: #3470ff;\n  color: white;\n  border: none;\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  cursor: pointer;\n  font-size: 24px;\n  line-height: 50px;\n  text-align: center;\n  z-index: 10001;\n`;\nexport { Select, BackToTopButton };\n","// extracted by mini-css-extract-plugin\nexport default {\"divForm\":\"Movies_divForm__YQVdd\",\"listMovies\":\"Movies_listMovies__lbxuM\",\"divGoBack\":\"Movies_divGoBack__3khB4\",\"home\":\"Movies_home__7CsFj\",\"home_div\":\"Movies_home_div__Apmeb\",\"pagination\":\"Movies_pagination__0Ilwr\",\"span_pagination\":\"Movies_span_pagination__s8LSs\",\"selectedLanguage\":\"Movies_selectedLanguage__QPyZY\",\"box\":\"Movies_box__hd5an\",\"button\":\"Movies_button__q3Y5z\"};","// // Movies.jsx с пагинацией\n// import React, { useState, useEffect } from \"react\";\n// import { Link, useLocation, useOutletContext } from \"react-router-dom\";\n// import css from \"./Movies.module.css\";\n// import TextField from \"@mui/material/TextField\";\n// import Box from \"@mui/material/Box\";\n// import Stack from \"@mui/material/Stack\";\n// import Button from \"@mui/material/Button\";\n// import { useSearchParams } from \"react-router-dom\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { fetchAllMovies, fetchDefaultMovies } from \"../redux/thunks\";\n// import {\n//   selectAllMovies,\n//   selectLoading,\n//   selectTotalPages,\n//   selectDefaultMovies,\n// } from \"../redux/selectors\";\n// import { Loader } from \"components/Loader/Loader\";\n// import { toast } from \"react-hot-toast\";\n// // import { ToastContainer, toast } from \"react-toastify\";\n// // import \"react-toastify/dist/ReactToastify.css\";\n// const Movies = () => {\n//   const location = useLocation();\n//   const dispatch = useDispatch();\n//   const movies = useSelector(selectAllMovies) || [];\n//   //\n//   const defaultMovies = useSelector(selectDefaultMovies) || [];\n\n//   const totalPages = useSelector(selectTotalPages);\n//   const loading = useSelector(selectLoading);\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [inputValue, setInputValue] = useState(\"\");\n//   const [searchQuery, setSearchQuery] = useSearchParams();\n\n//   const query = searchQuery.get(\"query\") ?? \"\";\n//   const { selectedLanguage } = useOutletContext();\n\n//   useEffect(() => {\n//     setCurrentPage(1);\n//     dispatch(\n//       fetchDefaultMovies({\n//         page: 1,\n//         language: selectedLanguage,\n//       })\n//     );\n//   }, [dispatch, selectedLanguage]);\n\n//   // useEffect(() => {\n//   //   const fetchMovies = ({\n//   //     query,\n//   //     page: currentPage,\n//   //     language: selectedLanguage,\n//   //   }) => {\n//   //     dispatch(\n//   //       fetchAllMovies({\n//   //         query,\n//   //         page: currentPage,\n//   //         language: selectedLanguage,\n//   //       })\n//   //     );\n//   //   };\n\n//   useEffect(() => {\n//     if (query) {\n//       dispatch(\n//         fetchAllMovies({\n//           query,\n//           page: currentPage,\n//           language: selectedLanguage,\n//         })\n//       );\n//     } else {\n//       dispatch(\n//         fetchDefaultMovies({\n//           page: currentPage,\n//           language: selectedLanguage,\n//         })\n//       );\n//     }\n//   }, [dispatch, currentPage, selectedLanguage, query]);\n//   //   fetchMovies({\n//   //     query,\n//   //     page: currentPage,\n//   //     language: selectedLanguage,\n//   //   });\n//   // }, [dispatch, currentPage, selectedLanguage, query]);\n\n//   // useEffect(() => {\n//   //   dispatch(\n//   //     fetchAllMovies({ query, page: currentPage, language: selectedLanguage })\n//   //   );\n//   // }, [dispatch, currentPage, selectedLanguage, query]);\n\n//   const handleInputQuery = (event) => {\n//     const textInput = event.target.value.trim().toLowerCase();\n//     setInputValue(textInput);\n//   };\n\n//   // const handleSubmit = (e) => {\n//   //   e.preventDefault();\n\n//   //   if (!inputValue) {\n//   //     alert(\"Enter your request\");\n//   //     return;\n//   //   }\n\n//   //   setCurrentPage(1);\n//   //   setSearchQuery({ query: inputValue });\n//   // };\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     const theme = localStorage.getItem(\"theme\");\n//     if (!inputValue) {\n//       setSearchQuery({ query: \"\" });\n\n//       toast.error(\"Enter your request\", {\n//         autoClose: 5000,\n//         position: \"top-center\",\n\n//         style: {\n//           marginTop: \"130px\",\n//           // background: \"#efede8\",\n//           background: theme === \"theme-dark\" ? \"#333\" : \"#efede8\",\n//           color: theme === \"theme-dark\" ? \"#fff\" : \"#000\",\n//         },\n//       });\n//       return;\n//     } else {\n//       setCurrentPage(1);\n//       setSearchQuery({ query: inputValue });\n//     }\n//   };\n\n//   const handleNextPage = () => {\n//     setCurrentPage((prevPage) => prevPage + 1);\n//     dispatch(\n//       fetchDefaultMovies({ page: currentPage * 2, language: selectedLanguage })\n//     );\n//   };\n\n//   const handlePrevPage = () => {\n//     setCurrentPage((prevPage) => prevPage - 1);\n//     dispatch(\n//       fetchDefaultMovies({\n//         page: (currentPage - 1) * 2,\n//         language: selectedLanguage,\n//       })\n//     );\n//   };\n\n//   return (\n//     <div className={css.divGoBack}>\n//       <div className={css.divForm}>\n//         <form onSubmit={handleSubmit}>\n//           <Box\n//             className=\"box\"\n//             sx={{\n//               display: \"flex\",\n//               alignItems: \"center\",\n//               justifyContent: \"center\",\n//               padding: \"10px 0.5px\",\n//               gap: \"5px\",\n//               \"@media screen and (min-width: 768px)\": {\n//                 // paddingLeft: \"168px\",\n//                 // paddingRight: \"168px\",\n//               },\n//               \"@media screen and (min-width: 1440px)\": {\n//                 // paddingLeft: \"498px\",\n//                 // paddingRight: \"498px\",\n//               },\n//             }}\n//           >\n//             <TextField\n//               className=\"input\"\n//               type=\"text\"\n//               name=\"title\"\n//               size=\"small\"\n//               sx={{\n//                 m: 1,\n//                 // width: \"35ch\",\n//                 margin: 0,\n//                 borderRadius: \"4px\",\n//                 // \"& fieldset\": {\n//                 //   border: \"none\",\n//                 //   // Border color for the outlined input\n//                 // },\n//               }}\n//               style={{\n//                 backgroundColor: \"#7e7575\",\n//                 color: \"white\",\n//               }}\n//               // #c7dfee #7e7575\n//               InputLabelProps={{\n//                 // style: { zIndex: 100000 },\n//                 className: css.inputLabel,\n//               }}\n//               onChange={handleInputQuery}\n//               value={inputValue}\n//               id=\"input-with-sx\"\n//               label=\"Search movies\"\n//               variant=\"outlined\"\n//             />\n//             <Button\n//               className=\"custom-button\"\n//               type=\"submit\"\n//               variant=\"outlined\"\n//               sx={{\n//                 // padding: \"6px 125px\",\n//                 \"@media screen and (min-width: 768px)\": {\n//                   padding: \"6px\",\n//                 },\n//               }}\n//             >\n//               Search\n//             </Button>\n//           </Box>\n//           <Stack spacing={2} direction=\"row\"></Stack>\n//         </form>\n//       </div>\n\n//       <ul className={css.listMovies}>\n//         {(!query ? defaultMovies : movies).map((mov, index) => (\n//           <li key={index}>\n//             {loading && <Loader />}\n//             <Link to={`/${mov.id}`} state={{ from: location }}>\n//               <div className={css.home_div}>\n//                 <img\n//                   className=\"center-block img-responsive\"\n//                   width=\"150px\"\n//                   height=\"100%\"\n//                   src={`https://image.tmdb.org/t/p/w500/${mov.poster_path}`}\n//                   alt={mov.title}\n//                   key=\"movie-poster\"\n//                 />\n//                 {`${mov.title} (${mov.release_date.slice(0, 4)})`}\n//               </div>\n//             </Link>\n//           </li>\n//         ))}\n//       </ul>\n\n//       <div className={css.pagination}>\n//         <button onClick={handlePrevPage} disabled={currentPage === 1}>\n//           Previous\n//         </button>\n//         <span className={css.span_pagination}>\n//           Page {currentPage} of {totalPages}\n//         </span>\n//         <button onClick={handleNextPage} disabled={currentPage === totalPages}>\n//           Next\n//         </button>\n//       </div>\n//       {loading && <Loader />}\n//     </div>\n//   );\n// };\n\n// export default Movies;\n\n// ========================================\n\n// ===========================================\n\n// ++++++++++++++++++++++++++++++\n// Movies.jsx\n// import React, { useState, useEffect } from \"react\";\n// import { Link, useLocation, useOutletContext } from \"react-router-dom\";\n// import css from \"./Movies.module.css\";\n// import { BackToTopButton } from \"./Home.styled\";\n// import TextField from \"@mui/material/TextField\";\n// import Box from \"@mui/material/Box\";\n// import Stack from \"@mui/material/Stack\";\n// import Button from \"@mui/material/Button\";\n// import { useSearchParams } from \"react-router-dom\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { fetchAllMovies, fetchDefaultMovies } from \"../redux/thunks\";\n// import {\n//   selectAllMovies,\n//   selectLoading,\n//   selectTotalPages,\n//   selectDefaultMovies,\n// } from \"../redux/selectors\";\n// import { Loader } from \"components/Loader/Loader\";\n// import { toast } from \"react-hot-toast\";\n\n// const Movies = () => {\n//   const location = useLocation();\n//   const dispatch = useDispatch();\n//   const movies = useSelector(selectAllMovies) || [];\n//   const defaultMovies = useSelector(selectDefaultMovies) || [];\n//   const totalPages = useSelector(selectTotalPages);\n//   const loading = useSelector(selectLoading);\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [inputValue, setInputValue] = useState(\"\");\n//   const [searchQuery, setSearchQuery] = useSearchParams();\n//   const query = searchQuery.get(\"query\") ?? \"\";\n//   const [showBackToTop, setShowBackToTop] = useState(false);\n//   const { selectedLanguage } = useOutletContext();\n\n//   useEffect(() => {\n//     setCurrentPage(1);\n//     if (query) {\n//       dispatch(\n//         fetchAllMovies({\n//           query,\n//           page: 2,\n//           language: selectedLanguage,\n//         })\n//       );\n//     } else {\n//       dispatch(\n//         fetchDefaultMovies({\n//           page: 2,\n//           language: selectedLanguage,\n//         })\n//       );\n//     }\n//   }, [dispatch, selectedLanguage, query]);\n\n//   useEffect(() => {\n//     const handleScroll = () => {\n//       if (\n//         window.innerHeight + document.documentElement.scrollTop >=\n//           document.documentElement.offsetHeight - 300 &&\n//         !loading &&\n//         currentPage < totalPages\n//       ) {\n//         setCurrentPage((prevPage) => prevPage + 1);\n//       }\n//     };\n\n//     if (window.scrollY > 100) {\n//       setShowBackToTop(true);\n//     } else {\n//       setShowBackToTop(false);\n//     }\n\n//     window.addEventListener(\"scroll\", handleScroll);\n//     return () => window.removeEventListener(\"scroll\", handleScroll);\n//   }, [loading, currentPage, totalPages]);\n\n//   useEffect(() => {\n//     if (currentPage > 1 && currentPage <= totalPages) {\n//       if (query) {\n//         dispatch(\n//           fetchAllMovies({\n//             query,\n//             page: currentPage,\n//             language: selectedLanguage,\n//           })\n//         );\n//       } else {\n//         dispatch(\n//           fetchDefaultMovies({\n//             page: currentPage,\n//             language: selectedLanguage,\n//           })\n//         );\n//       }\n//     }\n//   }, [dispatch, currentPage, selectedLanguage, query, totalPages]);\n\n//   const handleInputQuery = (event) => {\n//     const textInput = event.target.value.trim().toLowerCase();\n//     setInputValue(textInput);\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     const theme = localStorage.getItem(\"theme\");\n//     if (!inputValue) {\n//       setSearchQuery({ query: \"\" });\n//       toast.error(\"Enter your request\", {\n//         autoClose: 5000,\n//         position: \"top-center\",\n//         style: {\n//           marginTop: \"130px\",\n//           background: theme === \"theme-dark\" ? \"#333\" : \"#efede8\",\n//           color: theme === \"theme-dark\" ? \"#fff\" : \"#000\",\n//         },\n//       });\n//       return;\n//     } else {\n//       setCurrentPage(1);\n//       setSearchQuery({ query: inputValue });\n//     }\n//   };\n\n//   const handleBackToTop = () => {\n//     window.scrollTo({ top: 0, behavior: \"smooth\" });\n//     setShowBackToTop(false);\n//   };\n\n//   return (\n//     <div className={css.divGoBack}>\n//       <div className={css.divForm}>\n//         <form onSubmit={handleSubmit}>\n//           <Box\n//             className=\"box\"\n//             sx={{\n//               display: \"flex\",\n//               alignItems: \"center\",\n//               justifyContent: \"center\",\n//               padding: \"10px 0.5px\",\n//               gap: \"5px\",\n//             }}\n//           >\n//             <TextField\n//               className=\"input\"\n//               type=\"text\"\n//               name=\"title\"\n//               size=\"small\"\n//               sx={{\n//                 m: 1,\n//                 margin: 0,\n//                 borderRadius: \"4px\",\n//               }}\n//               style={{\n//                 backgroundColor: \"#7e7575\",\n//                 color: \"white\",\n//               }}\n//               InputLabelProps={{\n//                 className: css.inputLabel,\n//               }}\n//               onChange={handleInputQuery}\n//               value={inputValue}\n//               id=\"input-with-sx\"\n//               label=\"Search movies\"\n//               variant=\"outlined\"\n//             />\n//             <Button\n//               className=\"custom-button\"\n//               type=\"submit\"\n//               variant=\"outlined\"\n//               sx={{\n//                 \"@media screen and (min-width: 768px)\": {\n//                   padding: \"6px\",\n//                 },\n//               }}\n//             >\n//               Search\n//             </Button>\n//           </Box>\n//           <Stack spacing={2} direction=\"row\"></Stack>\n//         </form>\n//       </div>\n//       {!query ? (\n//         <div>\n//           <ul className={css.listMovies}>\n//             {defaultMovies.map((mov, index) => (\n//               <li key={index}>\n//                 {loading && <Loader />}\n//                 <Link to={`/${mov.id}`} state={{ from: location }}>\n//                   <div className={css.home_div}>\n//                     <img\n//                       className=\"center-block img-responsive\"\n//                       width=\"150px\"\n//                       height=\"100%\"\n//                       src={`https://image.tmdb.org/t/p/w500/${mov.poster_path}`}\n//                       alt={mov.title}\n//                       key=\"movie-poster\"\n//                     />\n//                     {`${mov.title} (${mov.release_date.slice(0, 4)})`}\n//                   </div>\n//                 </Link>\n//               </li>\n//             ))}\n//           </ul>\n//           <BackToTopButton $visible={showBackToTop} onClick={handleBackToTop}>\n//             ↑\n//           </BackToTopButton>\n//         </div>\n//       ) : (\n//         <div>\n//           <ul className={css.listMovies}>\n//             {movies.map((mov, index) => (\n//               <li key={index}>\n//                 {loading && <Loader />}\n//                 <Link to={`/${mov.id}`} state={{ from: location }}>\n//                   <div className={css.home_div}>\n//                     <img\n//                       className=\"center-block img-responsive\"\n//                       width=\"150px\"\n//                       height=\"100%\"\n//                       src={`https://image.tmdb.org/t/p/w500/${mov.poster_path}`}\n//                       alt={mov.title}\n//                       key=\"movie-poster\"\n//                     />\n//                     {`${mov.title} (${mov.release_date.slice(0, 4)})`}\n//                   </div>\n//                 </Link>\n//               </li>\n//             ))}\n//           </ul>\n//         </div>\n//       )}\n\n//       {loading && <Loader />}\n//     </div>\n//   );\n// };\n\n// export default Movies;\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useLocation, useOutletContext } from \"react-router-dom\";\nimport css from \"./Movies.module.css\";\nimport { BackToTopButton } from \"./Home.styled\";\nimport TextField from \"@mui/material/TextField\";\nimport Box from \"@mui/material/Box\";\n\nimport Button from \"@mui/material/Button\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchAllMovies, fetchDefaultMovies } from \"../redux/thunks\";\nimport {\n  selectAllMovies,\n  selectLoading,\n  selectTotalPages,\n  selectDefaultMovies,\n} from \"../redux/selectors\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { toast } from \"react-hot-toast\";\n\nconst Movies = () => {\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const movies = useSelector(selectAllMovies) || [];\n  const defaultMovies = useSelector(selectDefaultMovies) || [];\n  const totalPages = useSelector(selectTotalPages) || 1;\n  const loading = useSelector(selectLoading);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [searchQuery, setSearchQuery] = useSearchParams();\n  const query = searchQuery.get(\"query\") ?? \"\";\n  const [showBackToTop, setShowBackToTop] = useState(false);\n  const { selectedLanguage } = useOutletContext();\n\n  // Fetch movies on mount or query change\n  useEffect(() => {\n    setCurrentPage(1);\n    if (query) {\n      dispatch(\n        fetchAllMovies({\n          query,\n          page: 1,\n          language: selectedLanguage,\n        })\n      );\n    } else {\n      dispatch(\n        fetchDefaultMovies({\n          page: 1,\n          language: selectedLanguage,\n        })\n      );\n    }\n  }, [dispatch, selectedLanguage, query]);\n\n  // Infinite scroll for default movies\n  useEffect(() => {\n    if (!query) {\n      const handleScroll = () => {\n        if (\n          window.innerHeight + document.documentElement.scrollTop >=\n            document.documentElement.offsetHeight - 300 &&\n          !loading &&\n          currentPage < totalPages\n        ) {\n          setCurrentPage((prevPage) => prevPage + 1);\n        }\n      };\n\n      setShowBackToTop(window.scrollY > 100);\n      window.addEventListener(\"scroll\", handleScroll);\n      return () => window.removeEventListener(\"scroll\", handleScroll);\n    }\n  }, [loading, currentPage, totalPages, query]);\n\n  // Fetch movies for pagination\n  useEffect(() => {\n    if (currentPage > 1 && currentPage <= totalPages) {\n      if (query) {\n        dispatch(\n          fetchAllMovies({\n            query,\n            page: currentPage,\n            language: selectedLanguage,\n          })\n        );\n      } else {\n        dispatch(\n          fetchDefaultMovies({\n            page: currentPage,\n            language: selectedLanguage,\n          })\n        );\n      }\n    }\n  }, [dispatch, currentPage, selectedLanguage, query, totalPages]);\n\n  // Handle search input\n  const handleInputQuery = (event) => {\n    setInputValue(event.target.value.trim().toLowerCase());\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!inputValue) {\n      setSearchQuery({ query: \"\" });\n      toast.error(\"Enter your request\");\n      return;\n    }\n    setCurrentPage(1);\n    setSearchQuery({ query: inputValue });\n  };\n\n  const handleBackToTop = () => {\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\n    setShowBackToTop(false);\n  };\n\n  const handlePageChange = (newPage) => {\n    if (newPage > 0 && newPage <= totalPages) {\n      setCurrentPage(newPage);\n    }\n  };\n\n  // Helper function to safely get movie release year\n  const getReleaseYear = (releaseDate) => {\n    return releaseDate ? releaseDate.slice(0, 4) : \"Unknown\";\n  };\n\n  return (\n    <div className={css.divGoBack}>\n      <div className={css.divForm}>\n        <form onSubmit={handleSubmit}>\n          <Box\n            className=\"box\"\n            sx={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              padding: \"10px 0.5px\",\n              gap: \"5px\",\n            }}\n          >\n            <TextField\n              type=\"text\"\n              size=\"small\"\n              onChange={handleInputQuery}\n              value={inputValue}\n              label=\"Search movies\"\n              variant=\"outlined\"\n              sx={{\n                backgroundColor: \"#7e7575\",\n                borderRadius: \"4px\",\n                color: \"white\",\n              }}\n            />\n            <Button type=\"submit\" variant=\"outlined\">\n              Search\n            </Button>\n          </Box>\n        </form>\n      </div>\n      {!query ? (\n        <div>\n          <ul className={css.listMovies}>\n            {defaultMovies.map((mov, index) => (\n              <li key={index}>\n                <Link to={`/${mov.id}`} state={{ from: location }}>\n                  <div className={css.home_div}>\n                    <img\n                      width=\"150px\"\n                      height=\"100%\"\n                      src={\n                        mov.poster_path\n                          ? `https://image.tmdb.org/t/p/w500/${mov.poster_path}`\n                          : \"/placeholder.png\"\n                      }\n                      alt={mov.title || \"Movie Poster\"}\n                    />\n                    {`${mov.title || \"Unknown Title\"} (${getReleaseYear(\n                      mov.release_date\n                    )})`}\n                  </div>\n                </Link>\n              </li>\n            ))}\n          </ul>\n          <BackToTopButton $visible={showBackToTop} onClick={handleBackToTop}>\n            ↑\n          </BackToTopButton>\n        </div>\n      ) : (\n        <div>\n          <ul className={css.listMovies}>\n            {movies.map((mov, index) => (\n              <li key={index}>\n                <Link to={`/${mov.id}`} state={{ from: location }}>\n                  <div className={css.home_div}>\n                    <img\n                      width=\"150px\"\n                      height=\"100%\"\n                      src={\n                        mov.poster_path\n                          ? `https://image.tmdb.org/t/p/w500/${mov.poster_path}`\n                          : \"/placeholder.png\"\n                      }\n                      alt={mov.title || \"Movie Poster\"}\n                    />\n                    {`${mov.title || \"Unknown Title\"} (${getReleaseYear(\n                      mov.release_date\n                    )})`}\n                  </div>\n                </Link>\n              </li>\n            ))}\n          </ul>\n          <div className={css.pagination}>\n            <Button\n              onClick={() => handlePageChange(currentPage - 1)}\n              disabled={currentPage === 1}\n            >\n              Previous\n            </Button>\n            <span>{`Page ${currentPage} of ${totalPages}`}</span>\n            <Button\n              onClick={() => handlePageChange(currentPage + 1)}\n              disabled={currentPage === totalPages}\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n      )}\n      {loading && <Loader />}\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["BackToTopButton","styled","_templateObject","_taggedTemplateLiteral","_ref","isDarkTheme","_templateObject2","_ref2","$visible","props","visible","_searchQuery$get","location","useLocation","dispatch","useDispatch","movies","useSelector","selectAllMovies","defaultMovies","selectDefaultMovies","totalPages","selectTotalPages","loading","selectLoading","_useState","useState","_useState2","_slicedToArray","currentPage","setCurrentPage","_useState3","_useState4","inputValue","setInputValue","_useSearchParams","useSearchParams","_useSearchParams2","searchQuery","setSearchQuery","query","get","_useState5","_useState6","showBackToTop","setShowBackToTop","selectedLanguage","useOutletContext","useEffect","fetchAllMovies","page","language","fetchDefaultMovies","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","prevPage","scrollY","addEventListener","removeEventListener","handlePageChange","newPage","getReleaseYear","releaseDate","slice","_jsxs","className","css","children","_jsx","onSubmit","e","preventDefault","toast","Box","sx","display","alignItems","justifyContent","padding","gap","TextField","type","size","onChange","event","target","value","trim","toLowerCase","label","variant","backgroundColor","borderRadius","color","Button","map","mov","index","Link","to","concat","id","state","from","width","height","src","poster_path","alt","title","release_date","onClick","disabled","scrollTo","top","behavior","Loader"],"sourceRoot":""}