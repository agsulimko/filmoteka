{"version":3,"file":"static/js/727.022f82e6.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/pages/Home.module.css?8f25","pages/Home.styled.js","redux/selectors.js","pages/Home.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"homeMovies\":\"Home_homeMovies__WfhNE\",\"home\":\"Home_home__uEIM2\",\"home_div\":\"Home_home_div__fc6iF\",\"pagination\":\"Home_pagination__e2Qaa\",\"span_pagination\":\"Home_span_pagination__pgU+v\",\"selectedLanguage\":\"Home_selectedLanguage__3B7bq\"};","import styled from 'styled-components';\n\nconst Select = styled.select`\n  /* background-color: ${({ isDarkTheme }) =>\n    isDarkTheme ? 'green' : 'red'};*/\n  z-index: 100000;\n`;\n\nconst BackToTopButton = styled.button`\n  position: fixed;\n  bottom: 40px;\n  right: 40px;\n  display: ${({ $visible }) => ($visible ? 'block' : 'none')};\n  /* display: ${props => (props.visible ? 'block' : 'none')}; */\n  background-color: #3470ff;\n  color: white;\n  border: none;\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  cursor: pointer;\n  font-size: 24px;\n  line-height: 50px;\n  text-align: center;\n  z-index: 1000;\n`;\nexport { Select, BackToTopButton };\n","// selector.js;\nexport const selectMovies = state => state.movies.results;\n\nexport const selectLoading = state => state.movies.isLoading;\n\nexport const selectTotalPages = state => state.movies.total_pages;\n","// ==========================================\n// бесконечный скролл\n// import React, { useState, useEffect } from \"react\";\n// import { getAllMoviesTrending } from \"../api/api\";\n// import { Link, useLocation } from \"react-router-dom\";\n// import css from \"./Home.module.css\";\n// import { Select, BackToTopButton } from \"./Home.styled\";\n// import Loader from \"components/Loader/Loader\";\n\n// const Home = () => {\n//   const location = useLocation();\n//   const [movies, setMovies] = useState([]);\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [selectedLanguage, setSelectedLanguage] = useState(\n//     localStorage.getItem(\"selectedLanguage\") || \"en-US\"\n//   );\n//   const [loading, setLoading] = useState(false);\n//   const [hasMore, setHasMore] = useState(true);\n//   const [showBackToTop, setShowBackToTop] = useState(false);\n\n//   const fetchMovies = async (page, language) => {\n//     setLoading(true);\n//     try {\n//       // const limit = 40; // Запрашиваем сразу 40 фильмов\n//       const page1Results = await getAllMoviesTrending(page, language);\n//       const page2Results = await getAllMoviesTrending(page + 1, language);\n//       const combinedResults = [\n//         ...page1Results.results,\n//         ...page2Results.results,\n//       ];\n//       const total_pages = Math.max(\n//         page1Results.total_pages,\n//         page2Results.total_pages\n//       );\n\n//       if (page === 1) {\n//         setMovies(combinedResults); // Если страница первая, устанавливаем новый список фильмов\n//       } else {\n//         setMovies((prevMovies) => [...prevMovies, ...combinedResults]); // Иначе добавляем к текущему списку\n//       }\n\n//       setHasMore(page + 1 < total_pages); // Устанавливаем hasMore в зависимости от текущей и общего числа страниц\n//     } catch (err) {\n//       console.log(err.message);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     localStorage.setItem(\"selectedLanguage\", selectedLanguage);\n//     setCurrentPage(1); // Сбрасываем текущую страницу при изменении языка\n//     setMovies([]); // Очищаем список фильмов при изменении языка\n//   }, [selectedLanguage]);\n\n//   useEffect(() => {\n//     fetchMovies(currentPage, selectedLanguage); // Вызываем загрузку фильмов при изменении currentPage или selectedLanguage\n//   }, [currentPage, selectedLanguage]);\n\n//   useEffect(() => {\n//     const handleScroll = () => {\n//       if (\n//         window.innerHeight + document.documentElement.scrollTop >=\n//           document.documentElement.offsetHeight - 100 &&\n//         !loading &&\n//         hasMore\n//       ) {\n//         setCurrentPage((prevPage) => prevPage + 2); // Пагинация при скролле вниз, увеличиваем на 2 страницы\n//       }\n//       if (window.scrollY > 300) {\n//         setShowBackToTop(true); // Показать кнопку \"Наверх\" при прокрутке вниз\n//       } else {\n//         setShowBackToTop(false);\n//       }\n//     };\n\n//     window.addEventListener(\"scroll\", handleScroll);\n//     return () => window.removeEventListener(\"scroll\", handleScroll);\n//   }, [loading, hasMore]);\n\n//   const handleBackToTop = () => {\n//     window.scrollTo({ top: 0, behavior: \"smooth\" }); // Плавный скролл наверх\n//   };\n\n//   return (\n//     <div className={css.homeMovies}>\n//       <div>\n//         <Select\n//           value={selectedLanguage}\n//           onChange={(e) => setSelectedLanguage(e.target.value)}\n//           className={css.selectedLanguage}\n//         >\n//           <option value=\"en-US\">En</option>\n//           <option value=\"de-DE\">De</option>\n//           <option value=\"uk-UA\">Uk</option>\n//           <option value=\"ru-RU\">Ru</option>\n//           <option value=\"ar-SA\">العربية</option>\n//         </Select>\n//       </div>\n//       <h1>Trending today</h1>\n\n//       <div className={css.home}>\n//         {movies.map((mov, index) => (\n//           <Link\n//             key={`${mov.id}-${index}`}\n//             to={`${mov.id}`}\n//             state={{ from: location }}\n//           >\n//             <div className={css.home_div}>\n//               <img\n//                 className=\"center-block img-responsive\"\n//                 width=\"150px\"\n//                 height=\"100%\"\n//                 src={`https://image.tmdb.org/t/p/w500/${mov.poster_path}`}\n//                 alt={mov.title}\n//               />\n//               {`${mov.title} (${mov.release_date.slice(0, 4)})`}\n//             </div>\n//           </Link>\n//         ))}\n//       </div>\n//       <BackToTopButton $visible={showBackToTop} onClick={handleBackToTop}>\n//         ↑\n//       </BackToTopButton>\n//       {loading && <div>{Loader()}</div>}\n//       {/* {loading && <div>Loading...</div>} */}\n//     </div>\n//   );\n// };\n\n// export default Home;\n\n// =====================================================\n// with paginations 123...567\n// import React, { useState, useEffect } from \"react\";\n// import { getAllMoviesTrending } from \"../api/api\";\n// import { Link, useLocation } from \"react-router-dom\";\n// import css from \"./Home.module.css\";\n// // import styled from \"styled-components\";\n\n// import { Select } from \"./Home.styled\";\n\n// const Home = () => {\n//   const location = useLocation();\n//   const [movies, setMovies] = useState([]);\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [totalPages, setTotalPages] = useState(1);\n//   // Используем локальное хранилище для сохранения выбранного языка\n//   const [selectedLanguage, setSelectedLanguage] = useState(\n//     localStorage.getItem(\"selectedLanguage\") || \"en-US\"\n//   );\n\n//   // const [selectedLanguage, setSelectedLanguage] = useState(\"en-US\");\n//   // Значение по умолчанию - английский\n\n//   const fetchMovies = async (page, language) => {\n//     try {\n//       // const { results, total_pages } = await getAllMoviesTrending(page);\n//       const { results, total_pages } = await getAllMoviesTrending(\n//         page,\n//         language\n//       );\n\n//       setMovies(results);\n//       setTotalPages(total_pages);\n//     } catch (err) {\n//       console.log(err.message);\n//     }\n//   };\n\n//   useEffect(() => {\n//     // Сохраняем выбранный язык в локальное хранилище при его изменении\n//     localStorage.setItem(\"selectedLanguage\", selectedLanguage);\n//     fetchMovies(currentPage, selectedLanguage);\n//     // Функция для обработки события изменения в локальном хранилище\n//     const handleStorageChange = (e) => {\n//       if (e.key === \"selectedLanguage\") {\n//         setSelectedLanguage(e.newValue);\n//       }\n//     };\n\n//     window.addEventListener(\"storage\", handleStorageChange);\n\n//     return () => {\n//       window.removeEventListener(\"storage\", handleStorageChange);\n//     };\n//     // eslint-disable-next-line\n//   }, [selectedLanguage]);\n\n//   useEffect(() => {\n//     fetchMovies(currentPage, selectedLanguage);\n//     // eslint-disable-next-line\n//   }, [currentPage, selectedLanguage]);\n\n//   const handleNextPage = () => {\n//     setCurrentPage((prevPage) => prevPage + 1);\n//   };\n\n//   const handlePrevPage = () => {\n//     setCurrentPage((prevPage) => prevPage - 1);\n//   };\n//   // const handleLanguageChange = (e) => {\n//   //   setSelectedLanguage(e.target.value);\n//   // };\n//   return (\n//     <div className={css.homeMovies}>\n//       {/* <section className={css.selectedLanguage}> */}\n//       {/* <div className={css.selectedLanguage}> */}\n//       <Select\n//         value={selectedLanguage}\n//         // onChange={handleLanguageChange}\n//         onChange={(e) => setSelectedLanguage(e.target.value)}\n//         className={css.selectedLanguage}\n//       >\n//         <option value=\"en-US\">En</option>\n//         <option value=\"de-DE\">De</option>\n//         <option value=\"uk-UA\">Uk</option>\n//         <option value=\"ru-RU\">Ru</option>\n//         <option value=\"ar-SA\">العربية</option>\n//       </Select>\n//       {/* </section> */}\n//       {/* </div> */}\n//       <h1>Trending today</h1>\n\n//       <div className={css.home}>\n//         {movies.map((mov, index) => {\n//           return (\n//             <Link key={index} to={`${mov.id}`} state={{ from: location }}>\n//               <div className={css.home_div}>\n//                 <img\n//                   className=\"center-block img-responsive\"\n//                   width=\"150px\"\n//                   height=\"100%\"\n//                   src={`https://image.tmdb.org/t/p/w500/${mov.poster_path}`}\n//                   alt={mov.title}\n//                   data-reactid=\".1.1.0.0.1.0.0.0\"\n//                   key=\"movie-poster\"\n//                 />\n//                 {`${mov.title} (${mov.release_date.slice(0, 4)})`}\n//               </div>\n//             </Link>\n//           );\n//         })}\n//       </div>\n\n//       <div className={css.pagination}>\n//         <button onClick={handlePrevPage} disabled={currentPage === 1}>\n//           Previous\n//         </button>\n//         <span className={css.span_pagination}>\n//           Page {currentPage} of {totalPages}\n//         </span>\n//         <button onClick={handleNextPage} disabled={currentPage === totalPages}>\n//           Next\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Home;\n\n// =====================================================\n//Redux-toolkit with paginations 123...567\n// import React, { useState, useEffect } from \"react\";\n// import { Link, useLocation } from \"react-router-dom\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import css from \"./Home.module.css\";\n// import { Select } from \"./Home.styled\";\n// import { fetchMovies } from \"../redux/thunks\";\n// import {\n//   selectMovies,\n//   selectLoading,\n//   selectTotalPages,\n// } from \"../redux/selectors\";\n\n// const Home = () => {\n//   const location = useLocation();\n//   const dispatch = useDispatch();\n//   const movies = useSelector(selectMovies) || [];\n//   const loading = useSelector(selectLoading);\n//   const totalPages = useSelector(selectTotalPages);\n//   const [currentPage, setCurrentPage] = useState(1);\n//   // const [totalPages, setTotalPages] = useState(1);\n//   const [selectedLanguage, setSelectedLanguage] = useState(\n//     localStorage.getItem(\"selectedLanguage\") || \"en-US\"\n//   );\n\n//   useEffect(() => {\n//     localStorage.setItem(\"selectedLanguage\", selectedLanguage);\n//     dispatch(fetchMovies({ page: currentPage, language: selectedLanguage }));\n//   }, [dispatch, selectedLanguage, currentPage]);\n\n//   const handleNextPage = () => {\n//     if (currentPage < totalPages) {\n//       setCurrentPage((prevPage) => prevPage + 1);\n//     }\n//   };\n\n//   const handlePrevPage = () => {\n//     if (currentPage > 1) {\n//       setCurrentPage((prevPage) => prevPage - 1);\n//     }\n//   };\n\n//   return (\n//     <div className={css.homeMovies}>\n//       <Select\n//         value={selectedLanguage}\n//         onChange={(e) => setSelectedLanguage(e.target.value)}\n//         className={css.selectedLanguage}\n//       >\n//         <option value=\"en-US\">En</option>\n//         <option value=\"de-DE\">De</option>\n//         <option value=\"uk-UA\">Uk</option>\n//         <option value=\"ru-RU\">Ru</option>\n//         <option value=\"ar-SA\">العربية</option>\n//       </Select>\n//       <h1>Trending today</h1>\n\n//       <div className={css.home}>\n//         {movies.map((mov, index) => (\n//           <Link key={index} to={`${mov.id}`} state={{ from: location }}>\n//             <div className={css.home_div}>\n//               <img\n//                 className=\"center-block img-responsive\"\n//                 width=\"150px\"\n//                 height=\"100%\"\n//                 src={`https://image.tmdb.org/t/p/w500/${mov.poster_path}`}\n//                 alt={mov.title}\n//                 data-reactid=\".1.1.0.0.1.0.0.0\"\n//                 key=\"movie-poster\"\n//               />\n//               {`${mov.title} (${mov.release_date.slice(0, 4)})`}\n//             </div>\n//           </Link>\n//         ))}\n//       </div>\n\n//       <div className={css.pagination}>\n//         <button onClick={handlePrevPage} disabled={currentPage === 1}>\n//           Previous\n//         </button>\n//         <span className={css.span_pagination}>\n//           Page {currentPage} of {totalPages}\n//         </span>\n//         <button onClick={handleNextPage} disabled={currentPage === totalPages}>\n//           Next\n//         </button>\n//       </div>\n//       {loading && <div>Loading...</div>}\n//     </div>\n//   );\n// };\n\n// export default Home;\n\n// ==========================================\n// Redux-toolkit бесконечный скролл\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport css from \"./Home.module.css\";\nimport { Select, BackToTopButton } from \"./Home.styled\";\nimport { fetchMovies } from \"../redux/thunks\";\nimport {\n  selectMovies,\n  selectLoading,\n  selectTotalPages,\n} from \"../redux/selectors\";\n\nconst Home = () => {\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const movies = useSelector(selectMovies) || [];\n  const loading = useSelector(selectLoading);\n  const totalPages = useSelector(selectTotalPages);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedLanguage, setSelectedLanguage] = useState(\n    localStorage.getItem(\"selectedLanguage\") || \"en-US\"\n  );\n  const [showBackToTop, setShowBackToTop] = useState(false);\n\n  useEffect(() => {\n    localStorage.setItem(\"selectedLanguage\", selectedLanguage);\n    setCurrentPage(1); // Reset current page when language changes\n    dispatch(fetchMovies({ page: 2, language: selectedLanguage }));\n  }, [dispatch, selectedLanguage]);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      if (\n        window.innerHeight + document.documentElement.scrollTop >=\n          document.documentElement.offsetHeight - 100 &&\n        !loading &&\n        currentPage < totalPages\n      ) {\n        setCurrentPage((prevPage) => prevPage + 1);\n      }\n      if (window.scrollY > 300) {\n        setShowBackToTop(true);\n      } else {\n        setShowBackToTop(false);\n      }\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, [loading, currentPage, totalPages]);\n\n  useEffect(() => {\n    if (currentPage > 1 && currentPage <= totalPages) {\n      dispatch(fetchMovies({ page: currentPage, language: selectedLanguage }));\n    }\n  }, [dispatch, currentPage, selectedLanguage, totalPages]);\n\n  const handleBackToTop = () => {\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\n  };\n\n  return (\n    <div className={css.homeMovies}>\n      <div>\n        <Select\n          value={selectedLanguage}\n          onChange={(e) => setSelectedLanguage(e.target.value)}\n          className={css.selectedLanguage}\n        >\n          <option value=\"en-US\">En</option>\n          <option value=\"de-DE\">De</option>\n          <option value=\"uk-UA\">Uk</option>\n          <option value=\"ru-RU\">Ru</option>\n          <option value=\"ar-SA\">العربية</option>\n        </Select>\n      </div>\n      <h1>Trending today</h1>\n\n      <div className={css.home}>\n        {movies.map((mov, index) => (\n          <Link key={index} to={`${mov.id}`} state={{ from: location }}>\n            <div className={css.home_div}>\n              <img\n                className=\"center-block img-responsive\"\n                width=\"150px\"\n                height=\"100%\"\n                src={`https://image.tmdb.org/t/p/w500/${mov.poster_path}`}\n                alt={mov.title}\n              />\n              {`${mov.title} (${mov.release_date.slice(0, 4)})`}\n            </div>\n          </Link>\n        ))}\n      </div>\n      <BackToTopButton $visible={showBackToTop} onClick={handleBackToTop}>\n        ↑\n      </BackToTopButton>\n      {loading && <div>Loading...</div>}\n    </div>\n  );\n};\n\nexport default Home;\n"],"names":["Select","styled","_templateObject","_taggedTemplateLiteral","_ref","isDarkTheme","BackToTopButton","_templateObject2","_ref2","$visible","props","visible","selectMovies","state","movies","results","selectLoading","isLoading","selectTotalPages","total_pages","location","useLocation","dispatch","useDispatch","useSelector","loading","totalPages","_useState","useState","_useState2","_slicedToArray","currentPage","setCurrentPage","_useState3","localStorage","getItem","_useState4","selectedLanguage","setSelectedLanguage","_useState5","_useState6","showBackToTop","setShowBackToTop","useEffect","setItem","fetchMovies","page","language","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","prevPage","scrollY","addEventListener","removeEventListener","_jsxs","className","css","children","_jsx","value","onChange","e","target","map","mov","index","Link","to","concat","id","from","width","height","src","poster_path","alt","title","release_date","slice","onClick","scrollTo","top","behavior"],"sourceRoot":""}