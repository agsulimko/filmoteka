{"version":3,"file":"static/js/530.e5a48e77.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/pages/Movies.module.css?d157","pages/Movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"inputLabel\":\"Movies_inputLabel__doosp\",\"divForm\":\"Movies_divForm__YQVdd\",\"box\":\"Movies_box__hd5an\",\"listMovies\":\"Movies_listMovies__lbxuM\",\"divGoBack\":\"Movies_divGoBack__3khB4\",\"home\":\"Movies_home__7CsFj\",\"home_div\":\"Movies_home_div__Apmeb\",\"pagination\":\"Movies_pagination__0Ilwr\",\"span_pagination\":\"Movies_span_pagination__s8LSs\",\"selectedLanguage\":\"Movies_selectedLanguage__QPyZY\",\"button\":\"Movies_button__q3Y5z\"};","// Movies.jsx\n// import React, { useState, useEffect } from \"react\";\n\n// import { Link, useLocation, useOutletContext } from \"react-router-dom\";\n// import css from \"./Movies.module.css\";\n\n// import TextField from \"@mui/material/TextField\";\n// import Box from \"@mui/material/Box\";\n// import Stack from \"@mui/material/Stack\";\n// import Button from \"@mui/material/Button\";\n\n// import { useSearchParams } from \"react-router-dom\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { fetchAllMovies } from \"../redux/thunks\";\n// import {\n//   selectLoading,\n//   selectMovies,\n//   selectTotalPages,\n// } from \"../redux/selectors\";\n// import Loader from \"components/Loader/Loader\";\n// const Movies = () => {\n//   const location = useLocation();\n//   const dispatch = useDispatch();\n//   const movies = useSelector(selectMovies) || [];\n//   const totalPages = useSelector(selectTotalPages);\n//   const loading = useSelector(selectLoading);\n//   const [currentPage, setCurrentPage] = useState(1);\n//   // const [totalPages, setTotalPages] = useState(1);\n//   // const [movies, setMovies] = useState([]);\n\n//   // const [searchInput, setSearchInput] = useState(\"\");\n//   // const [searchQuery, setSearchQuery] = useState(\"\");\n//   // const [searchedMovies, setSearchedMovies] = useState([]);\n//   const [inputValue, setInputValue] = useState(\"\");\n//   const [searchQuery, setSearchQuery] = useSearchParams();\n\n//   // const [selectedLanguage, setSelectedLanguage] = useState(\n//   //   localStorage.getItem(\"selectedLanguage\") || \"en-US\"\n//   // );\n//   const query = searchQuery.get(\"query\") ?? \"\";\n//   const { selectedLanguage } = useOutletContext();\n\n//   // const params = useParams();\n//   // console.log(params);\n//   // const fetchMovies = async (page, language) => {\n//   //   try {\n//   //     const { results, total_pages } = await getAllMovies(\n//   //       query,\n//   //       page,\n//   //       language\n//   //     );\n\n//   //     setMovies((prevMovies) => [...results]);\n//   //     setTotalPages(total_pages);\n//   //   } catch (err) {\n//   //     console.log(err.message);\n//   //   }\n//   // };\n\n//   console.log(query);\n//   useEffect(() => {\n//     // Сохраняем выбранный язык в локальное хранилище при его изменении\n//     // localStorage.setItem(\"selectedLanguage\", selectedLanguage);\n//     // // fetchMovies(currentPage, selectedLanguage);\n//     // dispatch(\n//     //   fetchAllMovies({ query, page: currentPage, language: selectedLanguage })\n//     // );\n//     if (!query) {\n//       dispatch(\n//         fetchAllMovies({\n//           page: currentPage,\n//           language: selectedLanguage,\n//           query,\n//         })\n//       );\n//     }\n//   }, [dispatch, currentPage, selectedLanguage, query]);\n\n//   // Функция для обработки события изменения в локальном хранилище\n//   // const handleStorageChange = (e) => {\n//   //   // if (e.key === \"selectedLanguage\") {\n//   //   //   setSelectedLanguage(e.newValue);\n//   //   // }\n//   // };\n\n//   // window.addEventListener(\"storage\", handleStorageChange);\n\n//   // return () => {\n//   //   window.removeEventListener(\"storage\", handleStorageChange);\n//   // };\n//   // eslint-disable-next-line react-hooks/exhaustive-deps\n\n//   const handleInputQuery = (event) => {\n//     const textInput = event.target.value.trim().toLowerCase();\n//     console.log(textInput);\n\n//     if (textInput) {\n//       setSearchQuery({ query: textInput });\n//       setInputValue(textInput);\n//     } else {\n//       setSearchQuery({});\n//       setInputValue(\"\");\n//     }\n//   };\n//   //   // Если в event.target.value  пустой обьект то записываем {}}\n//   //   // Если в event.target.value не пустой обьект то записываем (query: event.target.value)\n\n//   // Вызывается при отправке формы\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     if (!inputValue) {\n//       alert(\"Enter your request\");\n\n//       return;\n//     }\n//     setCurrentPage(1);\n//     dispatch(\n//       fetchAllMovies({ query: inputValue, page: 1, language: selectedLanguage })\n//     );\n\n//     setInputValue(\"\");\n//   };\n\n//   // console.log(location);\n//   const handleNextPage = () => {\n//     setCurrentPage((prevPage) => prevPage + 1);\n//   };\n\n//   const handlePrevPage = () => {\n//     setCurrentPage((prevPage) => prevPage - 1);\n//   };\n\n//   return (\n//     // <div className={css.divGoBack}>\n\n//     <div className={css.divGoBack}>\n//       {/* <Link to=\"/\"> Go back</Link> */}\n//       <div className={css.divForm}>\n//         <form onSubmit={handleSubmit}>\n//           <Box\n//             className={css.box}\n//             sx={{\n//               display: \"flex\",\n//               alignItems: \"center\",\n//               justifyContent: \"center\",\n//               padding: \"10px 2px\",\n//               gap: \"5px\",\n//             }}\n//           >\n//             <TextField\n//               className={css.input}\n//               type=\"text\"\n//               //  autocomplete=\"off\"\n//               //  autofocus\n//               //  placeholder=\"Search images and photos\"\n//               name=\"title\"\n//               size=\"small\"\n//               sx={{ m: 1, width: \"35ch\", margin: 0 }}\n//               style={{ backgroundColor: \"#7e7575\", color: \"white\" }}\n//               // className=\"form-control\"\n//               onChange={handleInputQuery}\n//               value={query || \"\"}\n//               // Устанавливаем пустую строку, если значение query равно null\n//               id=\"input-with-sx\"\n//               label=\"Search movies\"\n//               variant=\"outlined\"\n\n//               // margin=\"dense\"\n//             />\n//             <Button\n//               className={css.button}\n//               type=\"submit\"\n//               variant=\"outlined\"\n//               style={{\n//                 padding: \"6.5px\",\n//               }}\n//             >\n//               Search\n//             </Button>\n//           </Box>\n\n//           <Stack spacing={2} direction=\"row\"></Stack>\n//         </form>\n//       </div>\n\n//       <ul className={css.listMovies}>\n//         {movies.map((mov, index) => {\n//           return (\n//             <li key={index}>\n//               <Link to={`/${mov.id}`} state={{ from: location }}>\n//                 <div className={css.home_div}>\n//                   <img\n//                     className=\"center-block img-responsive\"\n//                     width=\"150px\"\n//                     height=\"100%\"\n//                     src={`https://image.tmdb.org/t/p/w500/${mov.poster_path}`}\n//                     alt={mov.title}\n//                     data-reactid=\".1.1.0.0.1.0.0.0\"\n//                     key=\"movie-poster\"\n//                   />\n//                   {/* {mov.title} */}\n//                   {`${mov.title} (${mov.release_date.slice(0, 4)})`}\n//                 </div>\n//               </Link>\n//             </li>\n//           );\n//         })}\n//       </ul>\n\n//       <div className={css.pagination}>\n//         <button onClick={handlePrevPage} disabled={currentPage === 1}>\n//           Previous\n//         </button>\n//         <span className={css.span_pagination}>\n//           Page {currentPage} of {totalPages}\n//         </span>\n//         <button onClick={handleNextPage} disabled={currentPage === totalPages}>\n//           Next\n//         </button>\n//       </div>\n//       {loading && <Loader />}\n//     </div>\n//   );\n// };\n\n// export default Movies;\n\n// Movies.jsx\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useLocation, useOutletContext } from \"react-router-dom\";\nimport css from \"./Movies.module.css\";\nimport TextField from \"@mui/material/TextField\";\nimport Box from \"@mui/material/Box\";\nimport Stack from \"@mui/material/Stack\";\nimport Button from \"@mui/material/Button\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchAllMovies, fetchDefaultMovies } from \"../redux/thunks\";\nimport {\n  selectAllMovies,\n  selectLoading,\n  selectTotalPages,\n  selectDefaultMovies,\n} from \"../redux/selectors\";\nimport Loader from \"components/Loader/Loader\";\n\nconst Movies = () => {\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const movies = useSelector(selectAllMovies) || [];\n  const defaultMovies = useSelector(selectDefaultMovies) || [];\n\n  const totalPages = useSelector(selectTotalPages);\n  const loading = useSelector(selectLoading);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [searchQuery, setSearchQuery] = useSearchParams();\n\n  const query = searchQuery.get(\"query\") ?? \"\";\n  const { selectedLanguage } = useOutletContext();\n\n  useEffect(() => {\n    setCurrentPage(1);\n    dispatch(\n      fetchDefaultMovies({\n        page: 1,\n        language: selectedLanguage,\n      })\n    );\n  }, [dispatch, selectedLanguage]);\n\n  useEffect(() => {\n    const fetchMovies = ({\n      query,\n      page: currentPage,\n      language: selectedLanguage,\n    }) => {\n      dispatch(\n        fetchAllMovies({\n          query,\n          page: currentPage,\n          language: selectedLanguage,\n        })\n      );\n    };\n\n    fetchMovies({\n      query,\n      page: currentPage,\n      language: selectedLanguage,\n    });\n  }, [dispatch, currentPage, selectedLanguage, query]);\n\n  const handleInputQuery = (event) => {\n    const textInput = event.target.value.trim().toLowerCase();\n    setInputValue(textInput);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (!inputValue) {\n      alert(\"Enter your request\");\n      return;\n    }\n\n    setCurrentPage(1);\n    setSearchQuery({ query: inputValue });\n  };\n\n  const handleNextPage = () => {\n    setCurrentPage((prevPage) => prevPage + 1);\n    dispatch(\n      fetchDefaultMovies({ page: currentPage * 2, language: selectedLanguage })\n    );\n  };\n\n  const handlePrevPage = () => {\n    setCurrentPage((prevPage) => prevPage - 1);\n    dispatch(\n      fetchDefaultMovies({\n        page: (currentPage - 1) * 2,\n        language: selectedLanguage,\n      })\n    );\n  };\n\n  return (\n    <div className={css.divGoBack}>\n      <div className={css.divForm}>\n        <form onSubmit={handleSubmit}>\n          <Box\n            className={css.box}\n            sx={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              padding: \"10px 2px\",\n              gap: \"5px\",\n            }}\n          >\n            <TextField\n              className={css.input}\n              type=\"text\"\n              name=\"title\"\n              size=\"small\"\n              sx={{ m: 1, width: \"35ch\", margin: 0 }}\n              style={{\n                backgroundColor: \"#7e7575\",\n                color: \"white\",\n              }}\n              InputLabelProps={{\n                style: { zIndex: 100000 },\n                className: css.inputLabel,\n              }}\n              onChange={handleInputQuery}\n              value={inputValue}\n              id=\"input-with-sx\"\n              label=\"Search movies\"\n              variant=\"outlined\"\n            />\n            <Button\n              type=\"submit\"\n              variant=\"outlined\"\n              sx={{\n                padding: \"6px 125px\",\n                \"@media screen and (min-width: 768px)\": {\n                  padding: \"6px\",\n                },\n              }}\n            >\n              Search\n            </Button>\n          </Box>\n          <Stack spacing={2} direction=\"row\"></Stack>\n        </form>\n      </div>\n\n      <ul className={css.listMovies}>\n        {(!query ? defaultMovies : movies).map((mov, index) => (\n          <li key={index}>\n            {loading && <Loader />}\n            <Link to={`/${mov.id}`} state={{ from: location }}>\n              <div className={css.home_div}>\n                <img\n                  className=\"center-block img-responsive\"\n                  width=\"150px\"\n                  height=\"100%\"\n                  src={`https://image.tmdb.org/t/p/w500/${mov.poster_path}`}\n                  alt={mov.title}\n                  key=\"movie-poster\"\n                />\n                {`${mov.title} (${mov.release_date.slice(0, 4)})`}\n              </div>\n            </Link>\n          </li>\n        ))}\n      </ul>\n\n      <div className={css.pagination}>\n        <button onClick={handlePrevPage} disabled={currentPage === 1}>\n          Previous\n        </button>\n        <span className={css.span_pagination}>\n          Page {currentPage} of {totalPages}\n        </span>\n        <button onClick={handleNextPage} disabled={currentPage === totalPages}>\n          Next\n        </button>\n      </div>\n      {loading && <Loader />}\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["_searchQuery$get","location","useLocation","dispatch","useDispatch","movies","useSelector","selectAllMovies","defaultMovies","selectDefaultMovies","totalPages","selectTotalPages","loading","selectLoading","_useState","useState","_useState2","_slicedToArray","currentPage","setCurrentPage","_useState3","_useState4","inputValue","setInputValue","_useSearchParams","useSearchParams","_useSearchParams2","searchQuery","setSearchQuery","query","get","selectedLanguage","useOutletContext","useEffect","fetchDefaultMovies","page","language","_ref","fetchAllMovies","fetchMovies","_jsxs","className","css","children","_jsx","onSubmit","e","preventDefault","alert","Box","sx","display","alignItems","justifyContent","padding","gap","TextField","type","name","size","m","width","margin","style","backgroundColor","color","InputLabelProps","zIndex","onChange","event","textInput","target","value","trim","toLowerCase","id","label","variant","Button","Stack","spacing","direction","map","mov","index","Loader","Link","to","concat","state","from","height","src","poster_path","alt","title","release_date","slice","onClick","prevPage","disabled"],"sourceRoot":""}