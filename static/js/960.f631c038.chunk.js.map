{"version":3,"file":"static/js/960.f631c038.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Trailer.module.css?4b70","components/Trailer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"MoreTrailersNot\":\"Trailer_MoreTrailersNot__-G5PT\",\"container\":\"Trailer_container__YQhfz\",\"DivMoreTrailes\":\"Trailer_DivMoreTrailes__VM3he\",\"DivButtonTrailes\":\"Trailer_DivButtonTrailes__tUZOB\"};","import React, { useState, useEffect } from \"react\";\nimport ReactPlayer from \"react-player\";\nimport { useParams } from \"react-router-dom\";\nimport css from \"./Trailer.module.css\";\nconst Trailer = () => {\n  const { movieId } = useParams();\n  const [videos, setVideos] = useState([]);\n  const [videoKey, setVideoKey] = useState(null);\n  //   const [videoId, setVideoId] = useState(null);\n  useEffect(() => {\n    const fetchVideos = async () => {\n      try {\n        const response = await fetch(\n          `https://api.themoviedb.org/3/movie/${movieId}/videos?api_key=0649efc971b913d6bfebf656f94b5c92`\n        );\n        const { results } = await response.json();\n        console.log(results);\n        if (results.length > 0) {\n          //   setVideoId(results[0].key);\n\n          setVideos(results);\n        }\n      } catch (error) {\n        console.error(\"Error fetching videos:\", error);\n      }\n    };\n\n    fetchVideos();\n  }, [movieId]);\n\n  const hasOfficialOrTrailer = (name) => {\n    return (\n      name.includes(\"Official\") ||\n      name.includes(\"Trailer\") ||\n      name.includes(\"trailer\") ||\n      name.includes(\"official\")\n    );\n  };\n\n  const playVideo = (key) => {\n    setVideoKey(key);\n  };\n\n  return (\n    <>\n      <div>\n        <div>\n          {/* <div>Trailer:</div> */}\n          {videos.map((video) => (\n            <div key={video.key}>\n              {/* {video.name === trailerType && ( */}\n              {hasOfficialOrTrailer(video.name) && (\n                <>\n                  <h5>\n                    {video.name} (\n                    {new Date(video.published_at).toLocaleDateString(\"en-US\", {\n                      day: \"numeric\",\n                      month: \"long\",\n                      year: \"numeric\",\n                    })}\n                    )\n                  </h5>\n                  <ReactPlayer\n                    url={`https://www.youtube.com/watch?v=${video.key}`}\n                    controls\n                    // width=\"100%\"\n                    min-width=\"310px\"\n                    // height=\"400px\"\n                  />\n                </>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n      <div>\n        <h4> More trailers:</h4>\n\n        {/* {videos.map((video) => (\n          <div key={video.key}>\n            {\" \"}\n            {!hasOfficialOrTrailer(video.name) && <h4> More trailers:</h4>}\n            {hasOfficialOrTrailer(video.name) && (\n              <h4> We don't have any more trailers for this movie.</h4>\n            )}\n          </div>\n        ))} */}\n\n        <div className={css.DivMoreTrailes}>\n          {videos.map((video) => (\n            <div key={video.key}>\n              {!hasOfficialOrTrailer(video.name) && (\n                <div>\n                  <div className={css.DivButtonTrailes}>\n                    <button onClick={() => playVideo(video.key)}>\n                      Play Video\n                    </button>\n                    <h5>\n                      {video.name} (\n                      {new Date(video.published_at).toLocaleDateString(\n                        \"en-US\",\n                        {\n                          day: \"numeric\",\n                          month: \"long\",\n                          year: \"numeric\",\n                        }\n                      )}\n                      )\n                    </h5>\n                  </div>\n                  {videoKey === video.key && (\n                    <ReactPlayer\n                      url={`https://www.youtube.com/watch?v=${video.key}`}\n                      controls\n                      width=\"100%\"\n                      height=\"400px\"\n                    />\n                  )}\n                </div>\n              )}\n            </div>\n          ))}\n          {videos.lengt && (\n            <h4> We don't have any more trailers for this movie.</h4>\n          )}\n        </div>\n\n        {/* <div>\n          {videos.map((video) => (\n            <div key={video.key}>\n              {videos.length === 0 && (\n                <p className={css.MoreTrailersNot}>\n                  We don't have any more trailers for this movie.\n                </p>\n              )}\n            </div>\n          ))}\n        </div> */}\n      </div>\n    </>\n  );\n};\n\nexport default Trailer;\n\n/* {videoId && (\n        <iframe\n          title=\"Trailer\"\n          width=\"310px\"\n          //   width=\"100%\"\n          //   height=\"400px\"\n          src={`https://www.youtube.com/embed/${videoId}`}\n          //   frameborder=\"0\"\n          //   allowfullscreen\n        ></iframe>\n      )} */\n"],"names":["movieId","useParams","_useState","useState","_useState2","_slicedToArray","videos","setVideos","_useState3","_useState4","videoKey","setVideoKey","useEffect","fetchVideos","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_yield$response$json","results","_context","prev","next","fetch","concat","sent","json","console","log","length","t0","error","stop","apply","arguments","hasOfficialOrTrailer","name","includes","_jsxs","_Fragment","children","_jsx","map","video","Date","published_at","toLocaleDateString","day","month","year","ReactPlayer","url","key","controls","className","css","onClick","width","height","lengt"],"sourceRoot":""}